package com.debugger.appium.spy.driver;

import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.concurrent.TimeUnit;

import javax.imageio.ImageIO;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.io.FileUtils;
import org.apache.http.HttpException;
import org.imgscalr.Scalr;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Point;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;

import com.debugger.appium.spy.constants.MobileOS;
import com.debugger.appium.spy.exceptions.NoDeviceConnectedException;
import com.debugger.appium.spy.utils.SourceXMLParser;
import com.debugger.appium.spy.webkit.IOSDebugProxyMessage;
import com.debugger.appium.spy.webkit.WebKitConnector;
import com.debugger.appium.spy.webkit.WebkitProxyApiConsumer;
import com.debugger.appium.spy.webkit.socket.IOSDebugProxyWebSocketMessageHander;
import com.debugger.appium.spy.webkit.socket.WebKitSocketClient;

import io.appium.java_client.AppiumDriver;
import io.appium.java_client.MobileElement;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;

public class DriverBase {

	private AppiumDriver<WebElement> driver;
	private static DriverBase driverBaseInstance = null;

	private DriverBase() {
	}

	public static DriverBase getInstance() {
		if (driverBaseInstance == null)
			driverBaseInstance = new DriverBase();

		return driverBaseInstance;
	}

	public void initializeAppiumDriver(DesiredCapabilities capabilities, MobileOS os)
			throws MalformedURLException, ConfigurationException {

		String appiumURL = getAppiumProperties("APPIUM_URL");
		String appiumTimeout = getAppiumProperties("APPIUM_TIMEOUT_SECONDS");
		int appiumTimeoutInt = Integer.parseInt(appiumTimeout);

		URL url = new URL(appiumURL);

		if (os.equals(MobileOS.ANDROID)) {
			driver = new AndroidDriver<WebElement>(url, capabilities);
			driver.manage().timeouts().implicitlyWait(appiumTimeoutInt, TimeUnit.SECONDS);
		} else if (os.equals(MobileOS.IOS)) {
			driver = new IOSDriver<WebElement>(url, capabilities);
			driver.manage().timeouts().implicitlyWait(appiumTimeoutInt, TimeUnit.SECONDS);
		}

		// REMOVE LATER
		driver.get("https://www.ebay.com");

	}
	
	public Object executeScript(String script, Object... args) {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		return js.executeScript(script, args);
	}

	public String getScreeenshotBase64() {

		String imageString = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BASE64);
		return imageString;
		
	}

	public void getScreeenshotToFile(File destination) throws IOException {

		File image = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		FileUtils.copyFile(image, destination);

	}

	private String getAppiumProperties(String key) throws ConfigurationException {
		Configuration config = new PropertiesConfiguration("appium.properties");
		return (String) config.getProperty(key);
	}

	public AppiumDriver<WebElement> getDriver() {
		return driver;
	}

	public void setDriver(AppiumDriver<WebElement> driver) {
		this.driver = driver;
	}

	public String getCordinatedPageSource() {
		
		WebViewSurveyor surveyor = new WebViewSurveyor();
		surveyor.markAllFieldsInApp(driver);
		String pagesource = driver.getPageSource();
		return pagesource;
	}

	public Dimension getPageSize() {

		Dimension windowSize;

		if (driver.getContext().equals("NATIVE_APP")) {

			windowSize = driver.manage().window().getSize();

		} else {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			int width = ((Long) js.executeScript("return window.innerWidth || document.body.clientWidth")).intValue();
			int height = ((Long) js.executeScript("return window.innerHeight || document.body.clientHeight")).intValue();
			windowSize = new Dimension(width, height);

		}

		return windowSize;

	}
	
	
	public String getIOSWebViewNativeScreenshot(By webviewLocator) throws IOException, ParserConfigurationException {

		String currentContext = driver.getContext();
		try {
			
			Dimension webDimention = getPageSize();
			
			driver.context("NATIVE_APP");
			
			Dimension nativeDimention = getPageSize();
			
			byte[] imgarr = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
			System.out.println(driver.getPageSource());
			//WebElement elementBeforeWebview = driver.findElementByXPath("//XCUIElementTypeWebView/parent::*[@y > 0]"); 
			//XCUIElementTypeWebView/parent::*[@y > 0]
			MobileElement webview = (MobileElement)driver.findElement(webviewLocator);
			//FileUtils.copyFile(webview.getScreenshotAs(OutputType.FILE), new File("WebViewScreen"));
			//System.out.println(getCordinatedPageSource());
			SourceXMLParser sourceParser = new SourceXMLParser();
			Point elementBeforeWebviewLocation  = sourceParser.getElementBeforeTargetElement("XCUIElementTypeWebView", driver.getPageSource());
			Dimension webviewSize = webview.getSize();
			Point webviewLocation = new Point(0, elementBeforeWebviewLocation.y);

			System.out.println(
					webviewSize.width + "," + webviewSize.height + " | " + webviewLocation.x + "," + webviewLocation.y);

			BufferedImage original = createImageFromBytes(imgarr);
			System.out.println(original.getWidth() + "," + original.getHeight());

			original = Scalr.resize(original, nativeDimention.width, nativeDimention.height);
			ImageIO.write(original, "png", new File("ResizedWebView.png"));
			System.out.println(original.getWidth() + "," + original.getHeight());

			Rectangle rect = new Rectangle(webviewLocation.x, webviewLocation.y, original.getWidth(), (webview.getSize().height - webviewLocation.y) );
			System.out.println(rect);
			//Android Working Rectangle
			//Rectangle rect = new Rectangle(webview.getLocation().x, webview.getLocation().y, original.getWidth(),
			//		webviewSize.height);
			
			BufferedImage cropped = cropImage(original, rect);
			ImageIO.write(cropped, "png", new File("CroppedWebView.png"));
			
			return imgToBase64String(cropped, "PNG");
			
		} finally {
			driver.context(currentContext);
		}

	}
	
	
	public String getAndroidWebViewNativeScreenshot(By webviewLocator) throws IOException {
		
		// REMOVE LATER
		driver.context("WEBVIEW_com.infor.gtnexus.gtnmobile");
		
		String currentContext = driver.getContext();
		try {
			driver.context("NATIVE_APP");
			
			byte[] imgarr = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
			System.out.println(driver.getPageSource());
			WebElement webview = driver.findElement(webviewLocator);
			
			//FileUtils.copyFile(webview.getScreenshotAs(OutputType.FILE), new File("WebViewScreen"));
			
			Dimension webviewSize = webview.getSize();
			Point webviewLocation = webview.getLocation();

			System.out.println(
					webviewSize.width + "," + webviewSize.height + " | " + webviewLocation.x + "," + webviewLocation.y);

			BufferedImage original = createImageFromBytes(imgarr);
			System.out.println(original.getWidth() + "," + original.getHeight());

			//Android Working Rectangle
			Rectangle rect = new Rectangle(webview.getLocation().x, webview.getLocation().y, original.getWidth(),
					webviewSize.height);
			
			BufferedImage cropped = cropImage(original, rect);
			ImageIO.write(cropped, "png", new File("CroppedWebView.png"));
			
			return imgToBase64String(cropped, "PNG");
			
		} finally {
			driver.context(currentContext);
		}

	}
	
	
	public String getIOSWebKitProxyAssistedScreenshot() throws IOException, HttpException, NoDeviceConnectedException, URISyntaxException, InterruptedException {
		
		
		WebkitProxyApiConsumer consumer = new WebkitProxyApiConsumer();
		WebKitConnector connector = consumer.getWebViewComponentConnector();
		
		WebKitSocketClient socketClient = new WebKitSocketClient(new URI(connector.getWebSocketDebuggerUrl()));
		System.out.println("Opening WS Connection to : "+connector.getWebSocketDebuggerUrl());
		try{
			socketClient.connectBlocking();
			
			IOSDebugProxyWebSocketMessageHander msgHandler = new IOSDebugProxyWebSocketMessageHander(connector);
	        String requestJson = msgHandler.getScreenCastMessageJson();
	        System.out.println("Request Screeenshot Message : "+ requestJson);
	        IOSDebugProxyMessage replyMessage = socketClient.requestScreenshot(requestJson);
	        
	        return replyMessage.getParams().get("data").toString();
	        
		} finally {
			if(!socketClient.isClosed()) {
				socketClient.close();
			}
		}
		
		//return "";
		
		
	}
	
	
	
	private BufferedImage cropImage(BufferedImage src, Rectangle rect) {
		BufferedImage dest = src.getSubimage(rect.x, rect.y, rect.width, rect.height);
		return dest;
	}

	private BufferedImage createImageFromBytes(byte[] imageData) {
		ByteArrayInputStream bais = new ByteArrayInputStream(imageData);
		try {
			return ImageIO.read(bais);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}
	
	private String imgToBase64String(final RenderedImage img, final String formatName) {
	    final ByteArrayOutputStream os = new ByteArrayOutputStream();
	    try {
	        ImageIO.write(img, formatName, Base64.getEncoder().wrap(os));
	        return os.toString(StandardCharsets.ISO_8859_1.name());
	    } catch (final IOException ioe) {
	        throw new UncheckedIOException(ioe);
	    }
	}

}
